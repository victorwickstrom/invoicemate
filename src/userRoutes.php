<?php

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Slim\App;
use Psr\Container\ContainerInterface;
use App\AuthService;

/**
 * User management routes.
 *
 * This file defines endpoints for managing users and authenticating
 * against the system.  Administrators can create new users within
 * their organisation, while all users may authenticate via the login
 * endpoint to receive a JSON Web Token.  Credentials are securely
 * hashed using PHP's password_hash() and tokens are generated by
 * AuthService.
 */
return function (App $app) {
    $container = $app->getContainer();

    // Create a new user for an organisation
    $app->post('/v1/{organizationId}/users', function (Request $request, Response $response, array $args) use ($container) {
        /** @var \PDO $pdo */
        $pdo = $container->get('db');
        /** @var AuthService $auth */
        $auth = $container->get(\App\AuthService::class);
        $orgId = (int) $args['organizationId'];
        $data = json_decode($request->getBody()->getContents(), true);
        $username = trim($data['username'] ?? '');
        $password = $data['password'] ?? '';
        $role     = $data['role'] ?? 'user';
        if ($username === '' || $password === '' || !in_array($role, ['admin','user'])) {
            $response->getBody()->write(json_encode(['error' => 'Invalid input: username, password and valid role are required']));
            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');
        }
        // Check if any users exist for the organisation
        $stmtCheck = $pdo->prepare('SELECT COUNT(*) FROM users WHERE organization_id = :org');
        $stmtCheck->execute([':org' => $orgId]);
        $userCount = (int) $stmtCheck->fetchColumn();
        // Require current user to be admin if at least one user exists
        $requestUser = $request->getAttribute('user');
        if ($userCount > 0) {
            $roles = $requestUser['roles'] ?? [];
            if (!in_array('admin', $roles)) {
                $response->getBody()->write(json_encode(['error' => 'Forbidden: only admin may create additional users']));
                return $response->withStatus(403)->withHeader('Content-Type', 'application/json');
            }
            // Also enforce that the organisationId in token matches the URL parameter (handled by middleware)
        }
        // Check if username already exists
        $stmtExists = $pdo->prepare('SELECT COUNT(*) FROM users WHERE username = :username');
        $stmtExists->execute([':username' => $username]);
        if ((int) $stmtExists->fetchColumn() > 0) {
            $response->getBody()->write(json_encode(['error' => 'Username already exists']));
            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');
        }
        // Hash password and insert
        $passwordHash = $auth->hashPassword($password);
        $stmtInsert = $pdo->prepare('INSERT INTO users (organization_id, username, password_hash, role, created_at, updated_at) VALUES (:org, :username, :hash, :role, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)');
        $stmtInsert->execute([
            ':org'     => $orgId,
            ':username'=> $username,
            ':hash'    => $passwordHash,
            ':role'    => $role
        ]);
        $newId = (int) $pdo->lastInsertId();
        // Log in audit_log table
        $userPayload = $request->getAttribute('user');
        $userId = $userPayload['user_id'] ?? null;
        $logStmt = $pdo->prepare('INSERT INTO audit_log (organization_id, user_id, table_name, record_id, operation, changed_data) VALUES (:org, :userId, :tableName, :recordId, :operation, :changedData)');
        $logStmt->execute([
            ':org'       => $orgId,
            ':userId'    => $userId,
            ':tableName' => 'users',
            ':recordId'  => $newId,
            ':operation' => 'INSERT',
            ':changedData' => json_encode(['username' => $username, 'role' => $role])
        ]);
        $response->getBody()->write(json_encode(['id' => $newId, 'username' => $username, 'role' => $role]));
        return $response->withStatus(201)->withHeader('Content-Type', 'application/json');
    });

    // Authenticate a user and return a JWT
    $app->post('/login', function (Request $request, Response $response) use ($container) {
        /** @var \PDO $pdo */
        $pdo = $container->get('db');
        /** @var AuthService $auth */
        $auth = $container->get(\App\AuthService::class);
        $data = json_decode($request->getBody()->getContents(), true);
        $username = trim($data['username'] ?? '');
        $password = $data['password'] ?? '';
        if ($username === '' || $password === '') {
            $response->getBody()->write(json_encode(['error' => 'Invalid credentials']));
            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');
        }
        $stmt = $pdo->prepare('SELECT id, organization_id, password_hash, role FROM users WHERE username = :username');
        $stmt->execute([':username' => $username]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        if (!$user) {
            $response->getBody()->write(json_encode(['error' => 'Invalid credentials']));
            return $response->withStatus(401)->withHeader('Content-Type', 'application/json');
        }
        if (!$auth->verifyPassword($password, $user['password_hash'])) {
            $response->getBody()->write(json_encode(['error' => 'Invalid credentials']));
            return $response->withStatus(401)->withHeader('Content-Type', 'application/json');
        }
        $token = $auth->generateToken((int) $user['id'], (int) $user['organization_id'], $user['role']);
        // Return token and basic user information
        $payload = [
            'token'            => $token,
            'user_id'          => (int) $user['id'],
            'organization_id'  => (int) $user['organization_id'],
            'role'             => $user['role']
        ];
        $response->getBody()->write(json_encode($payload));
        return $response->withStatus(200)->withHeader('Content-Type', 'application/json');
    });
};